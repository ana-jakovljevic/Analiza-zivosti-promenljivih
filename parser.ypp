%{
#include<iostream>
#include <string>
#include <cstdlib>
#include <map>
#include <vector>
#include "instructions.hpp"

using namespace std;
extern int yylex();
extern void analyze_livness();
extern void azuriraj();
extern map<BasicBlock*, set<string>> in_map;
extern map<BasicBlock*, set<string>> out_map;

bool leader = false;
vector<BasicBlock*> basic_blocks;
vector<int> follow;
vector<Instruction*> bb;
map<string, int> labels_map;
int block_counter = 1;
string return_value = " ";

void yyerror(string s){
    cerr << s << endl;
    exit(EXIT_FAILURE);
}

%}

%token if_token goto_token 
%token <num> num_token;
%token <str> id_token rel_op_token return_token
%token <ch> op_token 

%type <v> Value

%union{
    float num;
    string* str;
    char ch;
    Value* v;
}

%%
Code: Code Line
| Line 
;
Line: Label 
| Assignment ';'
| ArrayAssignment ';' 
| Goto ';'
| IfGoto ';'
| Return ';'
;
Label: id_token ':' { 
    follow.push_back(block_counter+1);
    basic_blocks.push_back(new BasicBlock(bb, follow, block_counter));
    block_counter += 1;
    bb = vector<Instruction*>();
    follow = vector<int>();
    leader = false;
    
    labels_map[*$1] = block_counter;
    bb.push_back(new Label(*$1));
    delete $1;
}
;
Assignment: id_token ':''=' Value op_token Value {
    if(leader){  
        follow.push_back(block_counter+1);
        basic_blocks.push_back(new BasicBlock(bb, follow, block_counter));
        bb = vector<Instruction*>();
        follow = vector<int>();
        block_counter += 1;
        leader = false;
    }

    bb.push_back(new Assignment(*$1,$5,$4,$6));
    delete $1;
}
| id_token ':' '=' Value {
    if(leader){  
        follow.push_back(block_counter+1);
        basic_blocks.push_back(new BasicBlock(bb, follow, block_counter));
        bb = vector<Instruction*>();
        follow = vector<int>();
        block_counter += 1;
        leader = false;
    }
    bb.push_back(new Assignment(*$1,$4));
    delete $1;
}
;
ArrayAssignment: id_token '[' Value ']' ':' '=' Value {
    if(leader){  
        follow.push_back(block_counter+1);
        basic_blocks.push_back(new BasicBlock(bb, follow, block_counter));
        bb = vector<Instruction*>();
        follow = vector<int>();
        block_counter += 1;
        leader = false;
    }
    bb.push_back(new ArrayAssignment(*$1,$3,$7));
    delete $1;
}
;
Value: num_token {
    $$ = new Constant($1);
}
|  id_token {
    $$ = new Variable(*$1);
    delete $1;
}
;
Goto: goto_token id_token {
    follow.push_back(labels_map[*$2]);
    bb.push_back(new Goto(*$2));

    leader = true;
    
    delete $2;
}
;
IfGoto: if_token Value rel_op_token Value goto_token id_token {
    follow.push_back(labels_map[*$6]);
    bb.push_back(new IfGoto($2,*$3,$4,*$6));
    leader = true;

    delete $3;
    delete $6;
}
;
Return: return_token Value{
    if(leader){  
        follow.push_back(block_counter+1);
        basic_blocks.push_back(new BasicBlock(bb, follow, block_counter));
        bb = vector<Instruction*>();
        follow = vector<int>();
        block_counter += 1;
        leader = false;
    }

    bb.push_back(new Return($2));
    if($2->_type == VAR){
        return_value = ((Variable*)$2)->get_id();
    } 
} 
;
%%


int main(){
    basic_blocks = vector<BasicBlock*>();
    follow = vector<int>();
    yyparse();
    basic_blocks.push_back(new BasicBlock(bb, follow, block_counter));
    
    azuriraj();    
    analyze_livness();

    for(BasicBlock* bb: basic_blocks){
        cout << endl<< "In: { ";
        for(string el: in_map[bb])
            cout << el << ' ';
        cout << "}";
        cout << endl;
        bb->ispisi();
        cout << "Out: { ";
        for(string el: out_map[bb])
            cout << el << ' ';
        cout << "}";
        cout << endl  ;
    }
    
    return 0;
}